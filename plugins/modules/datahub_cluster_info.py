#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.cloudera.cloud.plugins.module_utils.cdp_common import CdpModule

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}

DOCUMENTATION = r'''
---
module: datahub_cluster_info
short_description: Gather information about CDP Datahubs
description:
    - Gather information about CDP Datahub Clusters
author:
  - "Webster Mudge (@wmudge)"
  - "Dan Chaffelson (@chaffelson)"
requirements:
  - cdpy
options:
  name:
    description:
      - If a name is provided, that Datahub will be described.
      - If no name provided, all Datahubs will be listed and (optionally) constrained by the C(environment) parameter.
    type: str
    required: False
    aliases:
      - datahub
  environment:
    description:
      - The name of the Environment in which to find and describe the Datahubs.
    type: str
    required: False
    aliases:
      - env
extends_documentation_fragment:
  - cloudera.cloud.cdp_sdk_options
  - cloudera.cloud.cdp_auth_options
'''

EXAMPLES = r'''
# Note: These examples do not set authentication details.

# List basic information about all Datahubs
- cloudera.cloud.datahub_cluster_info:

# Gather detailed information about a named Datahub
- cloudera.cloud.datahub_cluster_info:
    name: example-datahub

# Gather detailed information about a Datahub in an Environment
- cloudera.cloud.datahub_cluster_info:
    environment: example-env-name
'''

RETURN = r'''
---
datahubs:
  description: The information about the named Datahub or Datahubs
  type: array
  returned: on success
  elements: dict
  contains:
    datahub:
      description: The information about the Datahub
      type: dict
      returned: on success
      contains:
        clusterName:
          description: tktk
          type: str
        crn:
          description: tktk
          type: str
        creationDate:
          description: tktk
          type: str
        status:
          description: tktk
          type: str
        clusterStatus:
          description: tktk
          type: str
        nodeCount:
          description: tktk
          type: int
        instanceGroups:
          description: tktk
          type: array
          contains:
            instanceGroup:
              description: tktk
              type: dict
              contains:
                name:
                  description: tktk
                  type: str
                id:
                  description: tktk
                  type: str
                state:
                  description: tktk
                  type: str
                privateIp:
                  description: tktk
                  type: str
                publicIp:
                  description: tktk
                  type: str
                fqdn:
                  description: tktk
                  type: str
                status:
                  description: tktk
                  type: str
        workdloadType:
          description: tktk
          type: str
        cloudPlatform:
          description: tktk
          type: str
        imageDetails:
          description: tktk
          type: array
          contains:
            name:
              description: tktk
              type: str
            id:
              description:
                - This is the unique ID generated by the cloud provider for the image
              type: str
            catalogUrl:
              description: tktk
              type: str
            catalogName:
              description: tktk
              type: str
        environmentCrn:
          description: tktk
          type: str
        credentialCrn:
          description: tktk
          type: str
        datalakeCrn:
          description: tktk
          type: str
        clusterTemplateCrn:
          description: tktk
          type: str
        statusReason:
          description: tktk
          type: str
        clouderaManager:
          description: tktk
          type: dict
          contains:
            version:
              description: tktk
              type: str
            platformVersion:
              description: tktk
              type: str
        endpoints:
          description: tktk
          type: array
          contains:
            endpoint:
              description: tktk
              type: dict
              contains:
                serviceName:
                  description: tktk
                  type: str
                serviceUrl:
                  description: tktk
                  type: str
                displayName:
                  description: tktk
                  type: str
                knoxService:
                  description: tktk
                  type: str
                mode:
                  description: tktk
                  type: str
                open:
                  description: tktk
                  type: bool
sdk_out:
  description: Returns the captured CDP SDK log.
  returned: when supported
  type: str
sdk_out_lines:
  description: Returns a list of each line of the captured CDP SDK log.
  returned: when supported
  type: list
  elements: str
'''


class DatahubClusterInfo(CdpModule):
    def __init__(self, module):
        super(DatahubClusterInfo, self).__init__(module)

        # Set variables
        self.name = self._get_param('name')
        self.env = self._get_param('environment')

        # Initialize return values
        self.datahubs = []

        # Execute logic process
        self.process()

    @CdpModule._Decorators.process_debug
    def process(self):
        if self.name:  # Note that both None and '' will trigger this
            datahub_single = self.cdpy.datahub.describe_cluster(self.name)
            if datahub_single is not None:
                self.datahubs.append(datahub_single)
        else:
            self.datahubs = self.cdpy.datahub.describe_all_clusters(self.env)
            # The sdk will ignore env = None and list all Datahubs, making this a shortcut


def main():
    module = AnsibleModule(
        argument_spec=CdpModule.argument_spec(
            name=dict(required=False, type='str', aliases=['datahub']),
            environment=dict(required=False, type='str', aliases=['env'])
        ),
        supports_check_mode=True
    )

    result = DatahubClusterInfo(module)
    output = dict(changed=False, datahubs=result.datahubs)

    if result.debug:
        output.update(sdk_out=result.log_out, sdk_out_lines=result.log_lines)

    module.exit_json(**output)


if __name__ == '__main__':
    main()
